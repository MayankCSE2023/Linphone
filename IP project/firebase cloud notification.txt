Yes, you can implement Firebase Cloud Messaging (FCM) for push notifications in your Android app, including a VoIP application like Linphone. FCM is a cloud solution for messages on iOS, Android, and web applications. It enables you to send notifications and messages to devices in a reliable and efficient manner.

Here's a general guide on implementing Firebase push notifications in your Android app:

### 1. **Set Up Firebase Project:**
   - Create a Firebase project on the [Firebase Console](https://console.firebase.google.com/).
   - Follow the instructions to add your Android app to the Firebase project, which involves downloading the `google-services.json` configuration file.

### 2. **Add Firebase SDK to Your App:**
   - In your Android Studio project, add the Firebase SDK dependencies to your app's `build.gradle` file.

   ```gradle
   // Add the Firebase Core and Cloud Messaging dependencies
   implementation 'com.google.firebase:firebase-core:22.0.0'
   implementation 'com.google.firebase:firebase-messaging:24.0.0'
   ```

   - Apply the Google services plugin at the end of the `build.gradle` file.

   ```gradle
   apply plugin: 'com.google.gms.google-services'
   ```

### 3. **Initialize Firebase:**
   - In your app's `Application` class or the main activity, initialize Firebase with the `FirebaseApp.initializeApp()` method.

   ```kotlin
   class MyApplication : Application() {
       override fun onCreate() {
           super.onCreate()
           FirebaseApp.initializeApp(this)
       }
   }
   ```

   - Don't forget to declare this custom `Application` class in the `AndroidManifest.xml` file.

### 4. **Implement Firebase Messaging Service:**
   - Create a class that extends `FirebaseMessagingService` to handle incoming FCM messages.

   ```kotlin
   class MyFirebaseMessagingService : FirebaseMessagingService() {
       override fun onMessageReceived(remoteMessage: RemoteMessage) {
           // Handle incoming FCM message
           // Extract data and show a notification
       }

       override fun onNewToken(token: String) {
           // Handle token refresh (optional)
       }
   }
   ```

### 5. **Register Service in Manifest:**
   - Register your `FirebaseMessagingService` in the `AndroidManifest.xml` file.

   ```xml
   <service
       android:name=".MyFirebaseMessagingService"
       android:exported="false">
       <intent-filter>
           <action android:name="com.google.firebase.MESSAGING_EVENT" />
       </intent-filter>
   </service>
   ```

### 6. **Handle Incoming Messages:**
   - In the `onMessageReceived` method of your `FirebaseMessagingService`, you can handle the incoming message payload and trigger actions accordingly.

### 7. **Send Push Notifications from Server:**
   - Use the Firebase Cloud Messaging console or implement a server-side solution to send push notifications to your app.

### 8. **Token Handling (Optional):**
   - The `onNewToken` method is called when the FCM registration token is refreshed. You can use this token to identify the device and send messages to it.

### 9. **Test Your Implementation:**
   - Test your push notification implementation by sending test messages from the Firebase Cloud Messaging console or your server.

### Example (Kotlin):

Here's a simplified example of an `MyFirebaseMessagingService` class:

```kotlin
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage

class MyFirebaseMessagingService : FirebaseMessagingService() {

    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        // Handle incoming FCM message
        val notificationData = remoteMessage.data
        // Extract data and show a notification
        // ...
    }

    override fun onNewToken(token: String) {
        // Handle token refresh (optional)
        // You can send the new token to your server
        // ...
    }
}
```

Make sure to customize the `onMessageReceived` method to handle your specific use case, such as showing notifications or triggering specific actions.

Remember to follow the [official Firebase Cloud Messaging documentation](https://firebase.google.com/docs/cloud-messaging) for the most up-to-date information and best practices.